/*
试题 基础练习 Fibonacci数列
资源限制
    内存限制：256.0MB   C/C++时间限制：1.0s   Java时间限制：3.0s   Python时间限制：5.0s
问题描述
    Fibonacci数列的递推公式为：Fn=Fn-1+Fn-2，其中F1=F2=1。
    当n比较大时，Fn也非常大，现在我们想知道，Fn除以10007的余数是多少。
输入格式
    输入包含一个整数n。
输出格式
    输出一行，包含一个整数，表示Fn除以10007的余数。
    * 说明：在本题中，答案是要求Fn除以10007的余数，因此我们只要能算出这个余数即可，而不需要先计算出Fn的准确值，再将计算的结果除以10007取余数，直接计算余数往往比先算出原数再取余简单。
样例输入
    22
样例输出
    7704
数据规模与约定
    1 <= n <= 1,000,000。
*/
#include <iostream>
#define DIVISOR 10007

using namespace std;
/*
    这题的题目很友好，给了个提示说不一定要推出Fn再做取模运算
    确实是这样，Fn=F(n-1)+F(n-2)，每当推出来Fn>=10007时，将Fn-10007就能算出当前的余数
    而在推F(n+1)=Fn+F(n-1)时也不用担心，可以发现 Fn-10007+F(n-1) 和 Fn+F(n-1) 取模10007的运算结果是一致的
    借此，我得以能在迭代过程中保持数值规模一直在10007及以下，且整个过程中只有加减和逻辑运算
    最终得出的余数肯定是<10007的
        - SomeBottle 20221109
*/
int main()
{
    int f1 = 1; // 斐波拉契前两项为1
    int f2 = 1;
    int termsNum; // 项数（题目中输入的n）
    cin >> termsNum;
    // 从第3项开始推
    for (int n = 3; n <= termsNum; n++)
    {
        int add = f1 + f2;
        f1 = f2;                                   // f(n-1)变成f(n-2)
        f2 = add >= DIVISOR ? add - DIVISOR : add; // add - DIVISOR相当于一个取余的过程, 借此保证f1和f2永远是<10007的
    }
    cout << f2 << endl;
    return 0;
}