#include <cstdio>
#include <vector>

using namespace std;

// 本题很适合采用哈希表的思想，利用顺序储存结构的随机访问机制可以直接统计相应工龄的人数
// 题目中一集说了工龄范围在[0,50]，用直接定址法即可
int main()
{
    int staffNum;                 // 员工数
    vector<int> hashTable(51, 0); // 散列表
    scanf(" %d", &staffNum);      // 读入总员工数
    for (int i = 0; i < staffNum; i++)
    {
        short age;           // 当前员工的工龄
        scanf(" %hd", &age); // 注意，scanf的格式字符串一定要对应数据类型，这里是short就必须得用%hd，不然可能段错误！
        hashTable[age]++;    // 直接定址进行访问
    }
    // 输出结果
    for (int i = 0; i <= 50; i++)
        if (hashTable[i])
            printf("%d:%d\n", i, hashTable[i]);
}

/*
    这题的思路很简单，在数据输入的时候就可以用直接定址哈希表对不同工龄的员工数进行统计了。(因为题目给出的工龄范围是[0,50]，并不算大)

    这里我踩了个坑，用scanf按格式读入数据时一定要保证【格式字符串中的格式字符】对应了【待读取的数据类型】，比如这里我用了short类型，那么就应该用格式字符%hd，不然会报令人摸不着头脑的内存错误。
        * 不知道用什么那就用整形int(格式字符%d)最保险。

        - SomeBottle 2023.1.9
*/
/*
7-13 统计工龄
给定公司N名员工的工龄，要求按工龄增序输出每个工龄段有多少员工。

输入格式:
    输入首先给出正整数N（≤10^5），即员工总人数；随后给出N个整数，即每个员工的工龄，范围在[0, 50]。
输出格式:
    按工龄的递增顺序输出每个工龄的员工个数，格式为：“工龄:人数”。每项占一行。如果人数为0则不输出该项。
输入样例:
    8
    10 2 0 5 7 2 5 2
输出样例:
    0:1
    2:3
    5:2
    7:1
    10:1
代码长度限制
    16 KB
时间限制
    400 ms
内存限制
    64 MB
*/